name: Performance Analyzer CI/CD Pipeline

# Trigger the workflow on push to main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Define environment variables
env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  build-and-test-backend:
    name: Build and Test Backend
    runs-on: ubuntu-latest
    
    # Service containers for testing
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_performance_analyzer
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Step 2: Set up Python environment
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      # Step 3: Install system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev
      
      # Step 4: Install Python dependencies
      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      # Step 5: Set up environment variables for testing
      - name: Set up test environment
        run: |
          cd backend
          echo "SECRET_KEY=test-secret-key-for-ci" > .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_performance_analyzer" >> .env
          echo "FLASK_ENV=testing" >> .env
      
      # Step 6: Run database migrations/setup
      - name: Set up test database
        run: |
          cd backend
          python -c "
          from app import create_app, db
          app = create_app()
          with app.app_context():
              db.create_all()
          "
      
      # Step 7: Run linting (optional but recommended)
      - name: Lint with flake8
        run: |
          cd backend
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true
      
      # Step 8: Run the complete test suite
      - name: Run tests with pytest
        run: |
          cd backend
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_performance_analyzer
          SECRET_KEY: test-secret-key-for-ci
          FLASK_ENV: testing
      
      # Step 9: Upload coverage reports
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          directory: ./backend
          flags: backend
          name: backend-coverage
        continue-on-error: true
      
      # Step 10: Archive test results
      - name: Archive test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            backend/htmlcov/
            backend/coverage.xml
  
  # Security scanning job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run security scan with Bandit
        run: |
          cd backend
          pip install bandit[toml]
          bandit -r app/ -f json -o bandit-report.json
        continue-on-error: true
      
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: backend/bandit-report.json
  
  # Deployment job (only runs on main branch and after successful tests)
  deploy-to-heroku:
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    needs: [build-and-test-backend, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      # Step 1: Checkout code for deployment
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Step 2: Deploy to Heroku using the official action
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          usedocker: false
          appdir: "backend"
          procfile: "web: gunicorn wsgi:app"
      
      # Step 3: Run post-deployment health check
      - name: Health check
        run: |
          sleep 30  # Wait for deployment to complete
          curl -f https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com/api/v1/class/overview || exit 1
        continue-on-error: true
      
      # Step 4: Notify deployment status
      - name: Deployment notification
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment successful! App is live at https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com"
          else
            echo "❌ Deployment failed. Check the logs for details."
          fi

  # Optional: Build and test frontend (if you have one)
  build-and-test-frontend:
    name: Build and Test Frontend
    runs-on: ubuntu-latest
    if: false  # Set to true when you have a frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false
      
      - name: Build application
        run: |
          cd frontend
          npm run build